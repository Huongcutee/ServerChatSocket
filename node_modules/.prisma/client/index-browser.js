
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.16.0
 * Query Engine version: 34ace0eb2704183d2c05b60b52fba5c43c13f303
 */
Prisma.prismaVersion = {
  client: "5.16.0",
  engine: "34ace0eb2704183d2c05b60b52fba5c43c13f303"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.NotFoundError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`NotFoundError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}

/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.AccountScalarFieldEnum = {
  id: 'id',
  email: 'email',
  emailVerified: 'emailVerified',
  password: 'password',
  name: 'name',
  dob: 'dob',
  gender: 'gender',
  phoneNumber: 'phoneNumber',
  idCardNumber: 'idCardNumber',
  address: 'address',
  image: 'image',
  isLocked: 'isLocked',
  isTwoFactorEnabled: 'isTwoFactorEnabled',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.VerificationTokenScalarFieldEnum = {
  id: 'id',
  email: 'email',
  token: 'token',
  expires: 'expires',
  createdAt: 'createdAt'
};

exports.Prisma.PasswordResetTokenScalarFieldEnum = {
  id: 'id',
  email: 'email',
  token: 'token',
  expires: 'expires',
  createdAt: 'createdAt'
};

exports.Prisma.TwoFactorTokenScalarFieldEnum = {
  id: 'id',
  email: 'email',
  token: 'token',
  expires: 'expires',
  createdAt: 'createdAt'
};

exports.Prisma.TwoFactorConfirmationScalarFieldEnum = {
  id: 'id',
  accountId: 'accountId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SchoolScalarFieldEnum = {
  id: 'id',
  logo: 'logo',
  background: 'background',
  name: 'name',
  short: 'short',
  description: 'description',
  history: 'history',
  color: 'color',
  isPublished: 'isPublished',
  country: 'country',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SchoolScholarshipScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  cover: 'cover',
  isPublished: 'isPublished',
  schoolId: 'schoolId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SchoolScholarshipImageScalarFieldEnum = {
  id: 'id',
  url: 'url',
  scholarshipId: 'scholarshipId'
};

exports.Prisma.StudentSchoolScholarshipScalarFieldEnum = {
  id: 'id',
  studentId: 'studentId',
  scholarshipId: 'scholarshipId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SchoolGalleryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  schoolId: 'schoolId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SchoolGalleryImageScalarFieldEnum = {
  id: 'id',
  url: 'url',
  galleryId: 'galleryId'
};

exports.Prisma.SchoolLocationScalarFieldEnum = {
  id: 'id',
  cover: 'cover',
  name: 'name',
  address: 'address',
  isMain: 'isMain',
  schoolId: 'schoolId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SchoolLocationImageScalarFieldEnum = {
  id: 'id',
  url: 'url',
  locationId: 'locationId'
};

exports.Prisma.SchoolLocationContactScalarFieldEnum = {
  id: 'id',
  phone: 'phone',
  hours: 'hours',
  fax: 'fax',
  email: 'email',
  url: 'url',
  locationId: 'locationId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SchoolProgramScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  cover: 'cover',
  isPublished: 'isPublished',
  schoolId: 'schoolId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SchoolProgramImageScalarFieldEnum = {
  id: 'id',
  url: 'url',
  programId: 'programId'
};

exports.Prisma.StudentSchoolProgramScalarFieldEnum = {
  id: 'id',
  studentId: 'studentId',
  programId: 'programId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.StudentSchoolLocationScalarFieldEnum = {
  id: 'id',
  studentId: 'studentId',
  locationId: 'locationId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.StudentScalarFieldEnum = {
  id: 'id',
  studentCode: 'studentCode',
  degreeType: 'degreeType',
  certificateType: 'certificateType',
  certificateImg: 'certificateImg',
  gradeType: 'gradeType',
  gradeScore: 'gradeScore',
  cover: 'cover',
  additional: 'additional',
  status: 'status',
  accountId: 'accountId',
  schoolId: 'schoolId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ChatScalarFieldEnum = {
  id: 'id',
  name: 'name',
  creatAt: 'creatAt',
  updateAt: 'updateAt'
};

exports.Prisma.MessageScalarFieldEnum = {
  id: 'id',
  content: 'content',
  createAt: 'createAt',
  updateAt: 'updateAt',
  studentCode: 'studentCode',
  chatId: 'chatId'
};

exports.Prisma.EventScalarFieldEnum = {
  id: 'id',
  title: 'title',
  hostId: 'hostId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.EventProfileScalarFieldEnum = {
  id: 'id',
  eventId: 'eventId',
  profileId: 'profileId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProfileScalarFieldEnum = {
  id: 'id',
  status: 'status',
  studentId: 'studentId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProfileFriendScalarFieldEnum = {
  id: 'id',
  isActive: 'isActive',
  profileIdOne: 'profileIdOne',
  profileIdTwo: 'profileIdTwo',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AreaScalarFieldEnum = {
  id: 'id',
  title: 'title',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProfileBiographyScalarFieldEnum = {
  id: 'id',
  content: 'content',
  profileId: 'profileId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProfileBiographyAreaScalarFieldEnum = {
  id: 'id',
  biographyId: 'biographyId',
  areaId: 'areaId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProfileBiographySocialScalarFieldEnum = {
  id: 'id',
  type: 'type',
  href: 'href',
  profileBiographyId: 'profileBiographyId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProfileBlogScalarFieldEnum = {
  id: 'id',
  title: 'title',
  content: 'content',
  profileId: 'profileId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProfileBlogImageScalarFieldEnum = {
  id: 'id',
  url: 'url',
  profileBlogId: 'profileBlogId'
};

exports.Prisma.PostScalarFieldEnum = {
  id: 'id',
  content: 'content',
  status: 'status',
  isArchived: 'isArchived',
  profileId: 'profileId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PostImageScalarFieldEnum = {
  id: 'id',
  url: 'url',
  postId: 'postId'
};

exports.Prisma.PostLikeScalarFieldEnum = {
  id: 'id',
  profileId: 'profileId',
  postId: 'postId'
};

exports.Prisma.PostShareScalarFieldEnum = {
  id: 'id',
  profileId: 'profileId',
  postId: 'postId'
};

exports.Prisma.PostSaveScalarFieldEnum = {
  id: 'id',
  profileId: 'profileId',
  postId: 'postId'
};

exports.Prisma.PostCommentScalarFieldEnum = {
  id: 'id',
  content: 'content',
  image: 'image',
  isArchived: 'isArchived',
  profileId: 'profileId',
  postId: 'postId',
  parentCommentId: 'parentCommentId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PostCommentLikeScalarFieldEnum = {
  id: 'id',
  profileId: 'profileId',
  postCommentId: 'postCommentId'
};

exports.Prisma.GroupScalarFieldEnum = {
  id: 'id',
  ownerId: 'ownerId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProfileGroupScalarFieldEnum = {
  id: 'id',
  profileId: 'profileId',
  groupId: 'groupId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.NewsScalarFieldEnum = {
  id: 'id',
  title: 'title',
  content: 'content',
  type: 'type',
  cover: 'cover',
  isPublished: 'isPublished',
  schoolId: 'schoolId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.NewsNotificationScalarFieldEnum = {
  id: 'id',
  type: 'type',
  isRead: 'isRead',
  studentId: 'studentId',
  fromId: 'fromId',
  newsId: 'newsId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.StudentFollowScalarFieldEnum = {
  id: 'id',
  studentId: 'studentId',
  followerId: 'followerId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ContactScalarFieldEnum = {
  id: 'id',
  name: 'name',
  title: 'title',
  phone: 'phone',
  email: 'email',
  message: 'message',
  isRead: 'isRead',
  schoolId: 'schoolId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.Gender = exports.$Enums.Gender = {
  MALE: 'MALE',
  FEMALE: 'FEMALE'
};

exports.Country = exports.$Enums.Country = {
  AUSTRALIA: 'AUSTRALIA',
  KOREA: 'KOREA',
  CANADA: 'CANADA'
};

exports.DegreeType = exports.$Enums.DegreeType = {
  HIGHSCHOOL: 'HIGHSCHOOL',
  UNIVERSITY: 'UNIVERSITY'
};

exports.CertificateType = exports.$Enums.CertificateType = {
  IELTS: 'IELTS',
  TOEFL: 'TOEFL'
};

exports.GradeType = exports.$Enums.GradeType = {
  GPA: 'GPA',
  CGPA: 'CGPA'
};

exports.StudentStatus = exports.$Enums.StudentStatus = {
  STUDYING: 'STUDYING',
  DROPPED: 'DROPPED',
  AWAITING: 'AWAITING',
  APPROVED: 'APPROVED'
};

exports.ProfileStatus = exports.$Enums.ProfileStatus = {
  ONLINE: 'ONLINE',
  OFFLINE: 'OFFLINE',
  IDLE: 'IDLE',
  BUSY: 'BUSY',
  INVISIBLE: 'INVISIBLE'
};

exports.SocialType = exports.$Enums.SocialType = {
  YOUTUBE: 'YOUTUBE',
  FACEBOOK: 'FACEBOOK',
  INSTAGRAM: 'INSTAGRAM',
  TIKTOK: 'TIKTOK',
  TWITCH: 'TWITCH',
  TWITTER: 'TWITTER',
  PORTFOLLIO: 'PORTFOLLIO'
};

exports.PostStatus = exports.$Enums.PostStatus = {
  PUBLIC: 'PUBLIC',
  PRIVATE: 'PRIVATE',
  FRIENDS: 'FRIENDS',
  EXCEPT: 'EXCEPT'
};

exports.NewsType = exports.$Enums.NewsType = {
  ANNOUNCEMENT: 'ANNOUNCEMENT',
  EVENT: 'EVENT',
  BLOG: 'BLOG'
};

exports.ContactTitle = exports.$Enums.ContactTitle = {
  FEEDBACK: 'FEEDBACK',
  SYSTEM: 'SYSTEM',
  REFUND: 'REFUND',
  BILLING: 'BILLING',
  SUBSCRIPTION: 'SUBSCRIPTION',
  SCHOLARSHIP: 'SCHOLARSHIP',
  PROCEDURE: 'PROCEDURE'
};

exports.Prisma.ModelName = {
  Account: 'Account',
  VerificationToken: 'VerificationToken',
  PasswordResetToken: 'PasswordResetToken',
  TwoFactorToken: 'TwoFactorToken',
  TwoFactorConfirmation: 'TwoFactorConfirmation',
  School: 'School',
  SchoolScholarship: 'SchoolScholarship',
  SchoolScholarshipImage: 'SchoolScholarshipImage',
  StudentSchoolScholarship: 'StudentSchoolScholarship',
  SchoolGallery: 'SchoolGallery',
  SchoolGalleryImage: 'SchoolGalleryImage',
  SchoolLocation: 'SchoolLocation',
  SchoolLocationImage: 'SchoolLocationImage',
  SchoolLocationContact: 'SchoolLocationContact',
  SchoolProgram: 'SchoolProgram',
  SchoolProgramImage: 'SchoolProgramImage',
  StudentSchoolProgram: 'StudentSchoolProgram',
  StudentSchoolLocation: 'StudentSchoolLocation',
  Student: 'Student',
  Chat: 'Chat',
  Message: 'Message',
  Event: 'Event',
  EventProfile: 'EventProfile',
  Profile: 'Profile',
  ProfileFriend: 'ProfileFriend',
  Area: 'Area',
  ProfileBiography: 'ProfileBiography',
  ProfileBiographyArea: 'ProfileBiographyArea',
  ProfileBiographySocial: 'ProfileBiographySocial',
  ProfileBlog: 'ProfileBlog',
  ProfileBlogImage: 'ProfileBlogImage',
  Post: 'Post',
  PostImage: 'PostImage',
  PostLike: 'PostLike',
  PostShare: 'PostShare',
  PostSave: 'PostSave',
  PostComment: 'PostComment',
  PostCommentLike: 'PostCommentLike',
  Group: 'Group',
  ProfileGroup: 'ProfileGroup',
  News: 'News',
  NewsNotification: 'NewsNotification',
  StudentFollow: 'StudentFollow',
  Contact: 'Contact'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
